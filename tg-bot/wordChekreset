const { Scenes, Markup } = require('telegraf')


const word_check_2 = new Scenes.WizardScene(
    'Scene_word_check_2',
    async (ctx) => {
        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('–ù–∞—á–Ω–µ–º!', 'word_check')
        ]);
        await ctx.replyWithHTML('–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è', keyboard);
        return ctx.wizard.next()
    },
)


// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤
const questionOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

async function sendNextWord(ctx, wordIndex) {
  let word;
  let questionIndex = questionOrder[wordIndex - 1];
  // ... other variables declaration

  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞: ${wordIndex}`);

  switch (questionIndex) {
      case 1: 
        word = "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n–Ø –Ω–µ –∑–Ω–∞—é";
        correctBtn = { text: "I don't know", callback_data: "word_check_ang-rus_n1" };
        wrongBtns = [
          { text: "I'm uncertain.", callback_data: "closeBtn1" },
          { text: "Unsure about that.", callback_data: "closeBtn1" },
          { text: "It eludes me.", callback_data: "closeBtn1" },
        ]
        break;
      case 2: // –∞–Ω–≥ —Ä—É—Å 
        word = "–ê –∫–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n–ú–æ–∂–µ—Ç –±—ã—Ç—å";
        correctBtn = { text: "Maybe", callback_data: "word_check_ang-rus_n2" };
        wrongBtns = [
          { text: "Perhaps", callback_data: "closeBtn2" },
          { text: "It's possible", callback_data: "closeBtn2" },
          { text: "Could be", callback_data: "closeBtn2" },
        ];
        
        
        break;
        case 3: // —Ä—É—Å—Å –∞–Ω–≥  
        word = "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\nI'm sorry, I didn't catch that";
        correctBtn = { text: "–ü—Ä–æ—Å—Ç–∏—Ç–µ,—è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª", callback_data: "word_check_ang-rus_n3" };
        wrongBtns = [
          { text: "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è,\n—è –Ω–µ –ø–æ–Ω—è–ª.", callback_data: "closeBtn3" },
          { text: "–ú–Ω–µ –∂–∞–ª—å, —è –Ω–µ —É—Å–ª—ã—à–∞–ª.", callback_data: "closeBtn3" },
          { text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª.", callback_data: "closeBtn3" },
        ];
        break;
        case 4: 
        word = "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\n–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?";
        correctBtn = { text: "Could you repeat that, please?", callback_data: "word_check_ang-rus_n4" };
        wrongBtns = [
            { text: "Would you mind saying that again?", callback_data: "closeBtn4" },
            { text: "Can you rephrase that, I didn't catch it.", callback_data: "closeBtn4" },
            { text: "Is it possible for you to repeat what you just said?", callback_data: "closeBtn4" },
        ];
        break;
          case 5: //—Ä—É—Å - –∞–Ω–≥ –ø–æ–º–µ–Ω—è—Ç—å
            word = "–ö–∞–∫ –±—ã –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏\nI don't know";
            correctBtn = { text: "–Ø –Ω–µ –∑–Ω–∞—é", callback_data: "word_check_ang-rus_n5" };
            wrongBtns = [
              { text: "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω.", callback_data: "closeBtn5" },
              { text: "–ù–µ —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.", callback_data: "closeBtn5" },
              { text: "–≠—Ç–æ —É—Å–∫–æ–ª—å–∑–∞–µ—Ç –æ—Ç –º–µ–Ω—è.", callback_data: "closeBtn5" },
            ];
            break;
            case 6: // –∞–Ω–≥ —Ä—É—Å  –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ - Good morning
              word = "–ê –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\nMaybe";
              correctBtn = { text: "–ú–æ–∂–µ—Ç –±—ã—Ç—å", callback_data: "word_check_ang-rus_n6" };
              wrongBtns = [
                { text: "–í–æ–∑–º–æ–∂–Ω–æ", callback_data: "closeBtn6" },
                { text: "–ü–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏", callback_data: "closeBtn6" },
                { text: "–í–µ—Ä–æ—è—Ç–Ω–æ", callback_data: "closeBtn6" },
              ];
              break;
              case 7: // —Ä—É—Å –∞–Ω–≥  –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? - What‚Äôs new?
              word = "–ê –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª";
              correctBtn = { text: "I'm sorry, I didn't catch that", callback_data: "word_check_ang-rus_n7" };
                wrongBtns = [
                  { text: "Apologies, I didn't hear you.", callback_data: "closeBtn7" },
                  { text: "Excuse me, I missed that.", callback_data: "closeBtn7" },
                  { text: "My apologies, I didn't understand what you said.", callback_data: "closeBtn7" },
                ];
                break;

                case 8: //–∞—É–¥–∏–æ 2 
                const dd = 'sound/training_2/maybe.mp3';
                await ctx.replyWithHTML("–ü–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º");
                await ctx.replyWithVoice({ source: dd,  duration: 1, performer: '', title: '' });       
                ctx.wizard.state.waitForUserAnswerAfterAudio = true;
                ctx.wizard.state.currentWordIndex = 9; // –ü–ï–†–ï–•–û–î
                break;

                case 9: //–∞—É–¥–∏–æ 2 
                const maybe = 'sound/training_2/maybe.mp3';
                await ctx.replyWithHTML("–ü–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º");
                await ctx.replyWithVoice({ source: maybe,  duration: 1, performer: '', title: '' });       
                ctx.wizard.state.waitForUserAnswerAfterAudio = true;
                ctx.wizard.state.currentWordIndex = 9; // –ü–ï–†–ï–•–û–î
                break;

                case 10: //–∞—É–¥–∏–æ 3
                const ImsorryIdidntcatchthat = 'sound/training_2/ImsorryIdidntcatchthat.mp3';
                await ctx.replyWithHTML("–ü–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º");
                await ctx.replyWithVoice({ source: ImsorryIdidntcatchthat,  duration: 1, performer: '', title: '' });       
                ctx.wizard.state.waitForUserAnswerAfterAudio = true;
                ctx.wizard.state.currentWordIndex = 10; // –ü–ï–†–ï–•–û–î
                break;

                case 11: //–∞—É–¥–∏–æ 4
                const sound_2_4 = 'sound/training_2/sound_2_4.mp3';
                await ctx.replyWithHTML("–ü–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º");
                await ctx.replyWithVoice({ source: sound_2_4,  duration: 1, performer: '', title: '' });       
                ctx.wizard.state.waitForUserAnswerAfterAudio = true;
                ctx.wizard.state.currentWordIndex = 11; // –ü–ï–†–ï–•–û–î
                break;

                case 12: // –∞–Ω–≥ —Ä—É—Å –ö–∞–∫ –¥–µ–ª–∞?-  How are you? -
                word = "–°–º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏\nCould you repeat that, please?";
                correctBtn = { text: "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?", callback_data: "word_check_ang-rus_n8" };
                wrongBtns = [
                  { text: "–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ?", callback_data: "closeBtn8" },
                  { text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –µ—â–µ —Ä–∞–∑.", callback_data: "closeBtn8" },
                  { text: "–ü—Ä–æ—à—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –µ—Å–ª–∏ –º–æ–∂–Ω–æ.", callback_data: "closeBtn8" },
                ];
                break;
  }

  

  word_check_2.on('message', async ctx => {
    if (ctx.wizard.state.waitForUserAnswerAfterAudio) {
      await processUserAudioAnswer(ctx);
      ctx.wizard.state.waitForUserAnswerAfterAudio = false;
      ctx.wizard.state.currentWordIndex++;
      ctx.scene.reenter(); //–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –∑–¥–µ—Å—å
    } else {
      // –í–∞—à–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏–π –∑–¥–µ—Å—å
    }
  });


// 1. I don't know - –Ø –Ω–µ –∑–Ω–∞—é
// 2. Maybe - –ú–æ–∂–µ—Ç –±—ã—Ç—å
// 3. I'm sorry, I didn't catch that - –ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª
// 4. Could you repeat that, please? - –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?
  
async function processUserAudioAnswer(ctx) {
  const wordIndex = ctx.wizard.state.currentWordIndex;
  const userMessage = ctx.message.text.trim().toLowerCase();

  let correctMessage;
  let correctMessage2;
  if (wordIndex === 8) {
    correctMessage = "i don't know";
    correctMessage2 = "I don't know";
  } else if (wordIndex === 9) {
    correctMessage = "maybe";
    correctMessage2 = "Maybe";
  } else if (wordIndex === 10) {
    correctMessage = "i'm sorry, i didn't catch that";
    correctMessage2 = "I'm sorry, I didn't catch that";
  } else if (wordIndex === 11) {
    correctMessage = "could you repeat that, please?";
    correctMessage2 = "Could you repeat that, please?";
  }

  if (userMessage === correctMessage) {
    await ctx.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç");
  } else {
    await ctx.reply(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctMessage2} üëç`);
  }

  ctx.wizard.state.waitForUserAnswerAfterAudio = false;

  
    // –£–ø–æ—Ä—è–¥–æ—á—å—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞.
    ctx.wizard.state.currentWordIndex++;
    sendNextWord(ctx, ctx.wizard.state.currentWordIndex);
    }
  

  // —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
  const btns = [correctBtn, ...wrongBtns].sort(() => Math.random() - 0.5);
  function groupInColumn(array) {
    return array.map(item => [item]);
  }

  const replyMarkup = {
  inline_keyboard: groupInColumn(btns),
};

  ctx.wizard.state.currentWordIndex = wordIndex;

  if (wordIndex !== 8 && wordIndex !== 9 && wordIndex !== 10 && wordIndex !== 11) {
    await ctx.reply(word, { reply_markup: replyMarkup });
  }
}


word_check_2.action('word_check', async (ctx) => {
  await sendNextWord(ctx, 1); // –°—Ç–∞—Ä—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞
});

const checks = [
  {
    action: "word_check_ang-rus_n1",
    answer: "I don't know",
    correctBtnText: "I don't know ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 2,
  },
  {
    action: "word_check_ang-rus_n2",
    answer: "Maybe",
    correctBtnText: "Maybe ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 3,
  },
  {
    action: "word_check_ang-rus_n3",
    answer: "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª",
    correctBtnText: "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 4,
  },
  {
    action: "word_check_ang-rus_n4",
    answer: "Could you repeat that, please?",
    correctBtnText: "Could you repeat that, please? ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 5,
  },
  {
    action: "word_check_ang-rus_n5",
    answer: "–Ø –Ω–µ –∑–Ω–∞—é",
    correctBtnText: "–Ø –Ω–µ –∑–Ω–∞—é ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 6,
  },
  {
    action: "word_check_ang-rus_n6",
    answer: "–ú–æ–∂–µ—Ç –±—ã—Ç—å",
    correctBtnText: "–ú–æ–∂–µ—Ç –±—ã—Ç—å ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 7,
  },
  {
    action: "word_check_ang-rus_n7",
    answer: "I'm sorry, I didn't catch that",
    correctBtnText: "I'm sorry, I didn't catch that ‚úÖ",
    incorrectBtnText: "‚ùå",
    nextWordIndex: 8,
  },
    {
      action: "word_check_ang-rus_n8",
      answer: "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?",
      correctBtnText: "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞? ‚úÖ",
      incorrectBtnText: "‚ùå",
      nextWordIndex: null,
    },
  ]
word_check_2.action(new RegExp(checks.map((check) => check.action).join('|')), async (ctx) => {
  const check = checks.find((check) => check.action === ctx.callbackQuery.data);

  const inline_keyboard = [
    [
      {
        text: check.correctBtnText,
        callback_data: `correct-${check.action}`,
      },
    ],
  ];

  await ctx.editMessageReplyMarkup({ inline_keyboard });

  if (check.nextWordIndex !== null) {
    await sendNextWord(ctx, check.nextWordIndex);
  } else if (ctx.session.sentDelayedMessagesCount > 1 || (check.nextWordIndex === null && check.answer === "–ö–∞–∫ –¥–µ–ª–∞?")) {
    return handleTestEnd(ctx);
  } else {
    return ctx.scene.enter("temporaryScene_1");
  }
});

word_check_2.action(/correct-/, async (ctx) => {
  await ctx.answerCbQuery();
  
});

word_check_2.action(/closeBtn(\d)/, async (ctx) => {
  const checkIndex = parseInt(ctx.match[1]) - 1;
  const check = checks[checkIndex];

  if (check.answer) {
    await ctx.reply(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ –±—É–¥–µ—Ç ${check.answer}.`);
  } 

  const inline_keyboard = [
    [
      {
        text: check.incorrectBtnText,
        callback_data: ctx.callbackQuery.data,
      },
    ],
  ];

  await ctx.editMessageReplyMarkup({ inline_keyboard });

  if (check.nextWordIndex !== null) {
    await sendNextWord(ctx, check.nextWordIndex);
  } else {
    return handleTestEnd(ctx);
  }
});



async function handleTestEnd(ctx) {
  // –í—ã–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ `sentDelayedMessagesCount`
  if (!ctx.session.sentDelayedMessagesCount) {
    ctx.session.sentDelayedMessagesCount = 0;
  }
  
  if (ctx.session.sentDelayedMessagesCount === 0) {
    await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ –ø–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é —Ñ—Ä–∞–∑üí´\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!');
    await ctx.replyWithHTML('–í–æ—Ç, —á—Ç–æ –≤—ã –ø—Ä–æ—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è');
    await ctx.replyWithHTML("#phrases\nI don't know - –Ø –Ω–µ –∑–Ω–∞—é\nMaybe - –ú–æ–∂–µ—Ç –±—ã—Ç—å\nI'm sorry, I didn't catch that - –ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ªCould you repeat that, please? - –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?");

    ctx.session.sentDelayedMessagesCount++;
  } else if (ctx.session.sentDelayedMessagesCount === 1) {
    await ctx.reply('- –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞');
    ctx.session.sentDelayedMessagesCount++;
  } else if (ctx.session.sentDelayedMessagesCount === 2) {
    await ctx.reply('–ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã —Ñ—Ä–∞–∑—ã......');
    ctx.session.sentDelayedMessagesCount++;
    return ctx.scene.enter('trainingScene2');
  } else {
    await ctx.reply('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.'); // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç
  }
  return ctx.scene.enter('temporaryScene_2');
}


module.exports = word_check_2;