// const { Scenes, Markup } = require('telegraf')


// const word_check_1 = new Scenes.WizardScene(
//     'Scene_word_check_1',
//     async (ctx) => {
//         const keyboard = Markup.inlineKeyboard([
//             Markup.button.callback('Начнем!', 'word_check')
//         ]);
//         await ctx.replyWithHTML('Проверим твои знания', keyboard);
//         return ctx.wizard.next()
//     },
// )
// // функция проверки слов
// async function sendNextWord(ctx, wordIndex) {
//     let word;
//     let correctBtn;
//     let wrongBtns = [];

//     switch (wordIndex) {
//       case 1: // русс анг Как дела?-  How are you? 
//         word = "Как правильно перевести\nКак дела? ";
//         correctBtn = { text: "How are you?", callback_data: "word_check_ang-rus_n1" };
//         wrongBtns = [
//           { text: "не верное слово1", callback_data: "closeBtn1" },
//           { text: "не верное слово1", callback_data: "closeBtn1" },
//           { text: "не верное слово1", callback_data: "closeBtn1" },
//         ]
//         break;
//       case 2: // анг рус What’s new? — Что нового
//         word = "А как перевести\nWhat’s new?";
//         correctBtn = { text: "Что нового?", callback_data: "word_check_ang-rus_n2" };
//         wrongBtns = [
//           { text: "не верное слово2", callback_data: "closeBtn2" },
//           { text: "не верное слово2", callback_data: "closeBtn2" },
//           { text: "не верное слово2", callback_data: "closeBtn2" },
//         ];
//         break;
//         case 3: // русс анг  Могу я вам помочь? - Can I help you? 
//         word = "Как правильно перевести\nМогу я вам помочь? ";
//         correctBtn = { text: "Can I  help you?", callback_data: "word_check_ang-rus_n3" };
//         wrongBtns = [
//           { text: "не верное слово3", callback_data: "closeBtn3" },
//           { text: "не верное слово3", callback_data: "closeBtn3" },
//           { text: "не верное слово3", callback_data: "closeBtn3" },
//         ];
//         break;
//         case 4: // анг рус Good morning - Доброе утро
//           word = "Как правильно перевести\nGood morning";
//           correctBtn = { text: "Доброе утро", callback_data: "word_check_ang-rus_n4" };
//           wrongBtns = [
//             { text: "не верное слово4", callback_data: "closeBtn4" },
//             { text: "не верное слово4", callback_data: "closeBtn4" },
//             { text: "не верное слово4", callback_data: "closeBtn4" },
//           ];
//           break;
//           case 5: //рус - анг поменять
//             word = "Как бы вы перевели\nCan I  help you?";
//             correctBtn = { text: "Могу я вам помочь?", callback_data: "word_check_ang-rus_n5" };
//             wrongBtns = [
//               { text: "не верное слово5", callback_data: "closeBtn5" },
//               { text: "не верное слово5", callback_data: "closeBtn5" },
//               { text: "не верное слово5", callback_data: "closeBtn5" },
//             ];
//             break;
//             case 6: // анг рус  Доброе утро - Good morning
//               word = "А как правильно перевести\nДоброе утро";
//               correctBtn = { text: "Good morning ", callback_data: "word_check_ang-rus_n6" };
//               wrongBtns = [
//                 { text: "не верное слово6", callback_data: "closeBtn6" },
//                 { text: "не верное слово6", callback_data: "closeBtn6" },
//                 { text: "не верное слово6", callback_data: "closeBtn6" },
//               ];
//               break;
//               case 7: // рус анг  Что нового? - What’s new?
//               word = "А как сказать на английском\nЧто нового?";
//               correctBtn = { text: " What’s new?", callback_data: "word_check_ang-rus_n7" };
//                 wrongBtns = [
//                   { text: "не верное слово7", callback_data: "closeBtn7" },
//                   { text: "не верное слово7", callback_data: "closeBtn7" },
//                   { text: "не верное слово7", callback_data: "closeBtn7" },
//                 ];
//                 await ctx.replyWithHTML("Ты большой молодец, И две заключительных фраз.... ");

//                 break;
                
//                 case 8: // анг рус Как дела?-  How are you? -
//                 word = "Сможешь перевести\nHow are you?";
//                 correctBtn = { text: "Как дела?", callback_data: "word_check_ang-rus_n8" };
//                   wrongBtns = [
//                     { text: "не верное слово8", callback_data: "closeBtn8" },
//                     { text: "не верное слово8", callback_data: "closeBtn8" },
//                     { text: "не верное слово8", callback_data: "closeBtn8" },
//                   ];
//                   break;
//     }
//   // удаление кнопок после нажатия
//     const  btns = [correctBtn, ...wrongBtns].sort(() => Math.random() - 0.5);
//     function groupInPairs(array) {
//       let newArr = [];
//       for (let i = 0; i < array.length; i += 2) {
//         newArr.push(array.slice(i, i + 2));
//       }
//       return newArr;
//     }
//     const replyMarkup = {
//       inline_keyboard: groupInPairs(btns),
//     };
  
//     await ctx.reply(word, { reply_markup: replyMarkup });
// }


// // проверка №1

// word_check_1.action('word_check', async (ctx) => {
//     await sendNextWord(ctx, 1); // Старт с первого слова
//   })
  
//   word_check_1.action(/word_check_ang-rus_n1/, async (ctx) => {
//     const inline_keyboard = [
//       [
//         {
//           text: "How are you? ✅",
//           callback_data: "word_check_ang-rus_n1",
//         },
//       ],
//     ];
  
//     await ctx.editMessageReplyMarkup({ inline_keyboard });
//     await sendNextWord(ctx, 2); // Переход к слову2 после word_check_ang-rus_n1
//   });
  
//   word_check_1.action("closeBtn1", async (ctx) => {
//     await ctx.reply("Правильно будет Как дела?.")
//       const inline_keyboard = [
//       [
//         {
//           text: "❌",
//           callback_data: "closeBtn1",
//         },
//       ],
//     ];
  
//     await ctx.editMessageReplyMarkup({ inline_keyboard });
//     await sendNextWord(ctx, 2); // Переход к слову2 после closeBtn1
//   });
  

// // проверка №2

// word_check_1.action(/word_check_ang-rus_n2/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: " Что нового? ✅",
//         callback_data: "word_check_ang-rus_n2",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 3); // Переход к слову2 после word_check_ang-rus_n1
// });

// word_check_1.action("closeBtn2", async (ctx) => {
//   await ctx.reply("Правильно будет What’s new?.")
//     const inline_keyboard = [
//     [
//       {
//         text: " ❌ ",
//         callback_data: "closeBtn2",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 3); // Переход к слову2 после closeBtn1
// });


// //проверка №3 
// word_check_1.action(/word_check_ang-rus_n3/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: " Can I help you? ✅",
//         callback_data: "word_check_ang-rus_n3",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 4); // Переход к слову2 после word_check_ang-rus_n1
// });
// word_check_1.action("closeBtn3", async (ctx) => {
//   await ctx.reply("Правильно будет Я могу вам помочь?.")
//     const inline_keyboard = [
//     [
//       {
//         text: "❌",
//         callback_data: "closeBtn3",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 4); // Переход к слову2 после closeBtn1
// });


// //проверка №4
// word_check_1.action(/word_check_ang-rus_n4/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: "Доброе утро ✅",
//         callback_data: "word_check_ang-rus_n4",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 5); // Переход к слову2 после word_check_ang-rus_n1
// });
// word_check_1.action("closeBtn4", async (ctx) => {
//   await ctx.reply("Правильно будет Доброе утро.")
//     const inline_keyboard = [
//     [
//       {
//         text: " ❌",
//         callback_data: "closeBtn4",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 5); // Переход к слову2 после closeBtn1
// });



// //проверка №5 
// word_check_1.action(/word_check_ang-rus_n5/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: " Я Могу вам помочь?  ✅",
//         callback_data: "word_check_ang-rus_n5",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 6); // Переход к слову2 после word_check_ang-rus_n1
// });

// word_check_1.action("closeBtn5", async (ctx) => {
//   await ctx.reply("Правильно будет Я могу  вам помочь?.")
//     const inline_keyboard = [
//     [
//       {
//         text: " ❌",
//         callback_data: "closeBtn5",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 6); // Переход к слову2 после closeBtn1
// });



// //проверка №6
// word_check_1.action(/word_check_ang-rus_n6/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: "Good morning ✅",
//         callback_data: "word_check_ang-rus_n6",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 7); // Переход к слову2 после word_check_ang-rus_n1
// });
// word_check_1.action("closeBtn6", async (ctx) => {
//   await ctx.reply("Правильно будет Good morning")
//     const inline_keyboard = [
//     [
//       {
//         text: " ❌",
//         callback_data: "closeBtn6",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 7); // Переход к слову2 после closeBtn1
// });

// //проверка №7 
// word_check_1.action(/word_check_ang-rus_n7/, async (ctx) => {
//   const inline_keyboard = [
//     [
//       {
//         text: "What’s new? ✅",
//         callback_data: "word_check_ang-rus_n7",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 8); // Переход к слову2 после word_check_ang-rus_n1
// });
// word_check_1.action("closeBtn7", async (ctx) => {
//   await ctx.reply("Правильно будет Что нового?")
//     const inline_keyboard = [
//     [
//       {
//         text: " ❌",
//         callback_data: "closeBtn7",
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });
//   await sendNextWord(ctx, 8); // Переход к слову2 после closeBtn1
// });









// // проверка №8 концовка перехол на на реверс сцен 

// word_check_1.action(/word_check_ang-rus_n8/, async (ctx) => {
//   const inline_keyboard = [
//     [{
//       text: "How are you? ✅",
//       callback_data: "word_check_ang-rus_n8",
//     }],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });



  
//   if (!ctx.session.sentDelayedMessagesCount) {
//     ctx.session.sentDelayedMessagesCount = 0;
//   }
  
//   if (ctx.session.sentDelayedMessagesCount === 0) {
//     await ctx.reply('увидимся через 5 часов');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 1) {
//     await ctx.reply('увидимя через 24 часа');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 2) {
//     await ctx.reply('подожди минутку');
//     ctx.session.sentDelayedMessagesCount++;
//   }


//   // Задержка перед переходом на другую сцену
//   setTimeout(async () => {
//     await ctx.scene.enter('temporaryScene_1');
//   }, 4000); // Задержка в 4 секунды (4000 миллисекунд)
// });
  
// word_check_1.action("closeBtn8", async (ctx) => {
//   await ctx.reply("Правильно будет How are you?");
//   const inline_keyboard = [
//     [{
//       text: " ❌",
//       callback_data: "closeBtn8",
//     }],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });

//   // Проверяем, отправлено ли уже сообщение "увидимся через 4 секунды".
//   // Если нет (ctx.session.sentDelayedMessage !== true), отправляем его и устанавливаем флаг
//   // в сессии, чтобы больше не отправлять это сообщение в будущем.
  
//   if (!ctx.session.sentDelayedMessagesCount) {
//     ctx.session.sentDelayedMessagesCount = 0;
//   }
  
//   if (ctx.session.sentDelayedMessagesCount === 0) {
//     await ctx.reply('увидимя через 5 часов');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 1) {
//     await ctx.reply('увидимя через 24 часа');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 2) {
//     await ctx.reply('подожди минутку');
//     ctx.session.sentDelayedMessagesCount++;
//   }


  



//   // Задержка перед переходом на другую сцену
//   setTimeout(async () => {
//     await ctx.scene.enter('temporaryScene_1');
//   }, 4000); // Задержка в 4 секунды (4000 миллисекунд)
// });



// module.exports = word_check_1;
ы
// перед рандомом



// const { Scenes, Markup } = require('telegraf')


// const word_check_1 = new Scenes.WizardScene(
//     'Scene_word_check_1',
//     async (ctx) => {
//         const keyboard = Markup.inlineKeyboard([
//             Markup.button.callback('Начнем!', 'word_check')
//         ]);
//         await ctx.replyWithHTML('Проверим твои знания', keyboard);
//         return ctx.wizard.next()
//     },
// )


// // функция проверки слов
// async function sendNextWord(ctx, wordIndex) {

//   let word;
//   let correctBtn;
//   let wrongBtns = [];

//   console.log(`Отправка следующего слова: ${wordIndex}`);

//   switch (wordIndex) {
//       case 1: // русс анг Как дела?-  How are you? 
//         word = "Как правильно перевести\nКак дела? ";
//         correctBtn = { text: "How are you?", callback_data: "word_check_ang-rus_n1" };
//         wrongBtns = [
//           { text: "Hoa are yuo?", callback_data: "closeBtn1" },
//           { text: "Hwao era yuo?", callback_data: "closeBtn1" },
//           { text: "Hwo ear yuo?", callback_data: "closeBtn1" },
//         ]
//         break;
//       case 2: // анг рус What’s new? — Что нового
//         word = "А как перевести\nWhat’s new?";
//         correctBtn = { text: "Что нового?", callback_data: "word_check_ang-rus_n2" };
//         wrongBtns = [
//           { text: "Какие новости?", callback_data: "closeBtn2" },
//           { text: "Есть что-нибудь новое?", callback_data: "closeBtn2" },
//           { text: "Что интересного?", callback_data: "closeBtn2" },
//         ];
//         break;
//         case 3: // русс анг  Могу я вам помочь? - Can I help you? 
//         word = "Как правильно перевести\nМогу я вам помочь? ";
//         correctBtn = { text: "Can I  help you?", callback_data: "word_check_ang-rus_n3" };
//         wrongBtns = [
//           { text: "Can I halp yu?", callback_data: "closeBtn3" },
//           { text: "Kan I helpp yoo?", callback_data: "closeBtn3" },
//           { text: "Can I helf yu?", callback_data: "closeBtn3" },
//         ];
//         break;
//         case 4: // анг рус Good morning - Доброе утро
//           word = "Как правильно перевести\nGood morning";
//           correctBtn = { text: "Доброе утро", callback_data: "word_check_ang-rus_n4" };
//           wrongBtns = [
//             { text: "Добрый вечер", callback_data: "closeBtn4" },
//             { text: "Добрый день", callback_data: "closeBtn4" },
//             { text: "Хорошего дня ", callback_data: "closeBtn4" },
//           ];
//           break;
//           case 5: //рус - анг поменять
//             word = "Как бы вы перевели\nCan I  help you?";
//             correctBtn = { text: "Могу я вам помочь?", callback_data: "word_check_ang-rus_n5" };
//             wrongBtns = [
//               { text: "Могу быть полезен?", callback_data: "closeBtn5" },
//               { text: "Нужна помощь с чем-то?", callback_data: "closeBtn5" },
//               { text: "Если нужна помощь", callback_data: "closeBtn5" },
//             ];
//             break;
//             case 6: // анг рус  Доброе утро - Good morning
//               word = "А как правильно перевести\nДоброе утро";
//               correctBtn = { text: "Good morning ", callback_data: "word_check_ang-rus_n6" };
//               wrongBtns = [
//                 { text: "Goo monring", callback_data: "closeBtn6" },
//                 { text: "God moring", callback_data: "closeBtn6" },
//                 { text: "Good day", callback_data: "closeBtn6" },
//               ];
//               break;
//               case 7: // рус анг  Что нового? - What’s new?
//               word = "А как сказать на английском\nЧто нового?";
//               correctBtn = { text: " What’s new?", callback_data: "word_check_ang-rus_n7" };
//                 wrongBtns = [
//                   { text: "Wat's gnu?", callback_data: "closeBtn7" },
//                   { text: "Knot's ewe?", callback_data: "closeBtn7" },
//                   { text: "Watt's nuke?", callback_data: "closeBtn7" },
//                 ];
//                 break;

//                 case 8: //аудио 1 
//                 const howareyou = 'sound/howareyou.mp3';
//                 await ctx.replyWithHTML("Послушайте аудио и напишите услышанное слово на английском");
//                 await ctx.replyWithVoice({ source: howareyou,  duration: 1, performer: '', title: '' });       
//                 ctx.wizard.state.waitForUserAnswerAfterAudio = true;
//                 ctx.wizard.state.currentWordIndex = 8; // ПЕРЕХОД
//                 break;

//                 case 9: //аудио 2 
//                 const goodmorning = 'sound/goodmorning.mp3';
//                 await ctx.replyWithHTML("Послушайте аудио и напишите услышанное слово на английском");
//                 await ctx.replyWithVoice({ source: goodmorning,  duration: 1, performer: '', title: '' });       
//                 ctx.wizard.state.waitForUserAnswerAfterAudio = true;
//                 ctx.wizard.state.currentWordIndex = 9; // ПЕРЕХОД
//                 break;

//                 case 10: //аудио 3
//                 const CanIhelpyou = 'sound/CanIhelpyou.mp3';
//                 await ctx.replyWithHTML("Послушайте аудио и напишите услышанное слово на английском");
//                 await ctx.replyWithVoice({ source: CanIhelpyou,  duration: 1, performer: '', title: '' });       
//                 ctx.wizard.state.waitForUserAnswerAfterAudio = true;
//                 ctx.wizard.state.currentWordIndex = 10; // ПЕРЕХОД
//                 break;

//                 case 11: //аудио 4
//                 const whatsnew = 'sound/whatsnew.mp3';
//                 await ctx.replyWithHTML("Послушайте аудио и напишите услышанное слово на английском");
//                 await ctx.replyWithVoice({ source: whatsnew,  duration: 1, performer: '', title: '' });       
//                 ctx.wizard.state.waitForUserAnswerAfterAudio = true;
//                 ctx.wizard.state.currentWordIndex = 11; // ПЕРЕХОД
//                 break;

//                 case 12: // анг рус Как дела?-  How are you? -
//                 word = "Сможешь перевести\nHow are you?";
//                 correctBtn = { text: "Как дела?", callback_data: "word_check_ang-rus_n8" };
//                 wrongBtns = [
//                   { text: "Как настроение?", callback_data: "closeBtn8" },
//                   { text: "Как поживаешь?", callback_data: "closeBtn8" },
//                   { text: "Что нового?", callback_data: "closeBtn8" },
//                 ];
//                 break;
//   }

//   word_check_1.on('message', async ctx => {
//     if (ctx.wizard.state.waitForUserAnswerAfterAudio) {
//       await processUserAudioAnswer(ctx);
//       ctx.wizard.state.waitForUserAnswerAfterAudio = false;
//       ctx.wizard.state.currentWordIndex++;
//       ctx.scene.reenter(); //Добавьте этот вызов здесь
//     } else {
//       // Ваши обрабатываемые событий здесь
//     }
//   });
  
//   async function processUserAudioAnswer(ctx) {
//     const wordIndex = ctx.wizard.state.currentWordIndex;
//     const userMessage = ctx.message.text.trim().toLowerCase();
  
//     let correctMessage;
//     if (wordIndex === 8) {
//       correctMessage = "How are you?";
//     } else if (wordIndex === 9) {
//       correctMessage = "Good morning";
//     } else if (wordIndex === 10) {
//       correctMessage = "Can I help you?";
//     } else if (wordIndex === 11) {
//       correctMessage = "What’s new?";
//     }
  
//     // Преобразовываем корректное сообщение в нижний регистр только для сравнения
//     const correctMessageLowerCase = correctMessage.toLowerCase();
  
//     if (userMessage === correctMessageLowerCase) {
//       await ctx.reply("Правильно! 👍");
//     } else {
//       // Отправляем исходное correctMessage без изменения регистра
//       await ctx.reply(`Неправильно. Правильный ответ: ${correctMessage} 👍`);
//     }
  
//     ctx.wizard.state.waitForUserAnswerAfterAudio = false;
  
//     // Упорядочьте фрагмент с обновлением текущего индекса слова перед отправкой следующего слова.
//     ctx.wizard.state.currentWordIndex++;
//     sendNextWord(ctx, ctx.wizard.state.currentWordIndex);
//   }
  

  





//   // удаление кнопок после нажатия
//   const btns = [correctBtn, ...wrongBtns].sort(() => Math.random() - 0.5);
//   function groupInPairs(array) {
//     let newArr = [];
//     for (let i = 0; i < array.length; i += 2) {
//       newArr.push(array.slice(i, i + 2));
//     }
//     return newArr;
//   }
//   const replyMarkup = {
//     inline_keyboard: groupInPairs(btns),
//   };

//   ctx.wizard.state.currentWordIndex = wordIndex;

//   if (wordIndex !== 8 && wordIndex !== 9 && wordIndex !== 10 && wordIndex !== 11) {
//     await ctx.reply(word, { reply_markup: replyMarkup });
//   }
// }


// word_check_1.action('word_check', async (ctx) => {
//   await sendNextWord(ctx, 1); // Старт с первого слова
// });

// const checks = [
//   {
//     action: "word_check_ang-rus_n1",
//     answer: "Как дела?",
//     correctBtnText: "How are you? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 2,
//   },
//   {
//     action: "word_check_ang-rus_n2",
//     answer: "What’s new?",
//     correctBtnText: "Что нового? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 3,
//   },
//   {
//     action: "word_check_ang-rus_n3",
//     answer: "Can I  help you?",
//     correctBtnText: "Can I  help you?? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 4,
//   },
//   {
//     action: "word_check_ang-rus_n4",
//     answer: "Доброе утро",
//     correctBtnText: "Доброе утро ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 5,
//   },
//   {
//     action: "word_check_ang-rus_n5",
//     answer: "Могу я вам помочь?",
//     correctBtnText: "Могу я вам помочь? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 6,
//   },
//   {
//     action: "word_check_ang-rus_n6",
//     answer: "Good morning",
//     correctBtnText: "Good morning ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 7,
//   },
//   {
//     action: "word_check_ang-rus_n7",
//     answer: "What’s new?",
//     correctBtnText: "What’s new? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: 8,
//   },
//   {
//     action: "word_check_ang-rus_n8",
//     answer: "Как дела?",
//     correctBtnText: "Как дела? ✅",
//     incorrectBtnText: "❌",
//     nextWordIndex: null,
//   },
// ];

// word_check_1.action(new RegExp(checks.map((check) => check.action).join('|')), async (ctx) => {
//   const check = checks.find((check) => check.action === ctx.callbackQuery.data);

//   const inline_keyboard = [
//     [
//       {
//         text: check.correctBtnText,
//         callback_data: `correct-${check.action}`,
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });

//   if (check.nextWordIndex !== null) {
//     await sendNextWord(ctx, check.nextWordIndex);
//   } else if (ctx.session.sentDelayedMessagesCount > 1 || (check.nextWordIndex === null && check.answer === "Как дела?")) {
//     return handleTestEnd(ctx);
//   } else {
//     return ctx.scene.enter("temporaryScene_1");
//   }
// });

// word_check_1.action(/correct-/, async (ctx) => {
//   await ctx.answerCbQuery();
  
// });

// word_check_1.action(/closeBtn(\d)/, async (ctx) => {
//   const checkIndex = parseInt(ctx.match[1]) - 1;
//   const check = checks[checkIndex];

//   if (check.answer) {
//     await ctx.reply(`Правильно будет ${check.answer}.`);
//   } 

//   const inline_keyboard = [
//     [
//       {
//         text: check.incorrectBtnText,
//         callback_data: ctx.callbackQuery.data,
//       },
//     ],
//   ];

//   await ctx.editMessageReplyMarkup({ inline_keyboard });

//   if (check.nextWordIndex !== null) {
//     await sendNextWord(ctx, check.nextWordIndex);
//   } else {
//     return handleTestEnd(ctx);
//   }
// });



// async function handleTestEnd(ctx) {
//   // Выведите разные сообщения основываясь на значении сессии `sentDelayedMessagesCount`
//   if (!ctx.session.sentDelayedMessagesCount) {
//     ctx.session.sentDelayedMessagesCount = 0;
//   }
  
//   if (ctx.session.sentDelayedMessagesCount === 0) {
//     await ctx.reply('увидимся через 5 часов');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 1) {
//     await ctx.reply('увидимя через 24 часа');
//     ctx.session.sentDelayedMessagesCount++;
//   } else if (ctx.session.sentDelayedMessagesCount === 2) {
//     await ctx.reply('Подожди чуть-чуть я подготовлю для тебя новы фразы......');
//     ctx.session.sentDelayedMessagesCount++;
//   } else {
//     await ctx.reply('Тест завершен.'); // Если ни одно условие не удовлетворяет
//   }
//   return ctx.scene.enter('temporaryScene_1');
// }


// module.exports = word_check_1;

